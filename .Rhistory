aux1W <- list()
temp1 <- list()
temp_unwarped <- list()
temp_warped <- list()
a <- rep(0, ncol(T)*nrow(T))
b <- rep(0, ncol(T)*nrow(T))
i <- N-1
#xstart: minimum start point of segment i in query signal
#xend: maximum end point of segment i in query signal
xstart <- max(1+i*(Seg+d-Slack),(Lt+1)-(N-i)*(Seg+d+Slack))
xend <- min(1+i*(Seg+d + Slack),(Lt+1)-(N-i)*(Seg+d-Slack))
cat("\n i=",i,"\\(", xstart, "-" ,xend, "\\) \n")
x <- start
d-Slack
u <- d-Slack
x+Seg+u <= Lt + 1
Lt
x
xstart
x <- xstart
x+Seg+u
n_cores <- detectCores(logical = TRUE)
cl <- makeCluster(n_cores - 1, type = "PSOCK")
registerDoParallel(cl)
clusterExport(cl,list('Warping','x','i','u','Seg','Slack','Ix','X','T'))
channel <- 1:ncol(X)
channel
tic("channel")
results <- c(parLapply(cl,'channel','x','i','u',fun = Warping))
toc()
clusterExport(cl,list('Warping','x','i','u','Seg','Slack','Ix','X','T'))
channel <- 1:ncol(X)
tic("channel")
results <- c(parLapply(cl,'channel','x','i','u',fun = Warping))
?parApply()
?parLapply
channel <- 1:ncol(X)
tic("channel")
results <- c(parLapply(cl,'channel',fun = Warping))
toc()
results
clusterExport(cl,list('Warping','x','i','u','Seg','Slack','Ix','X','T'))
channel <- 1:ncol(X)
tic("channel")
results <- c(parLapply(cl,'channel',fun = Warping))
clusterExport(cl,list('Warping','x','i','u','Seg','Slack','Ix','X','T','f'))
channel <- 1:ncol(X)
tic("channel")
results <- c(parLapply(cl,'channel',fun = Warping))
toc()
source("GC_Sim.R")
ruta<-getwd()
Data <- readRDS(paste0(ruta,"/Data/sample_data.rds"))
Data <- readRDS(paste0(ruta,"/sample_data.rds"))
str(Data)
Data[1,,]
dim(Data[1,1:2900,])
plot(Data[1,,100],type = "l")
plot(Data[2,,100],type = "l")
# set 1st signal GC-MS as a target
T <- Data[1,,]
# set 2nd signal GC-MS as a query
X <- Data[2,,]
AgnesProjPath <- "E:/University of Glasgow/AgnieskaPRoject/GC-align/"
setwd(AgnesProjPath)
source(paste0(AgnesProjPath,"GC_Sim.R"))
T1 = c(0,1,1,2,5,6,5,5,4,4,3,2,1,1,0,0)
X1 = c(0,0,1,1,1,2,3,5,5,6,6,5,3,1,1,0)
X2  = c(0,0,1,1,1,2,3,5,5,6,6,5,2,1,1,0)
slack = 1
Seg = 5
Slack = 1
Options = c(0,1,1,0,0)
tic("cow")
cow(T1,X1,Seg,Slack,Options)
toc()
# align signal X1
tic("align")
align(T1,X1,Seg,Slack)
toc()
tic("alighGCMS")
WX1 <- alignGCMS(T1,X1,Seg,Slack)
toc()
WX1$W
tic("alighGCMS_Parallel")
WX1_Par <- alignGCMS_Parallel(T1,X1,Seg,Slack)
toc()
tic("alighGCMS_Parallel")
WX1_Par <- alignGCMS_Parallel(T1,X1,Seg,Slack)
tic("alighGCMS_Parallel")
WX1_Par <- alignGCMS_Parallel(T1,X1,Seg,Slack)
toc()
clusterExport(cl,list('Warping','x','i','u','Seg','Slack','Ix','X','T'),
envir = .GlobalEnv)
n_cores <- detectCores(logical = TRUE)
cl <- makeCluster(n_cores - 1, type = "PSOCK")
registerDoParallel(cl)
clusterExport(cl,list('Warping','x','i','u','Seg','Slack','Ix','X','T'),
envir = .GlobalEnv)
#    cl <- makeCluster(8)
#    clusterExport(cl,c("i","d","N","Slack","Seg","X","Ix","Lt",
#                       "T","F1","U","aux1W","f",
#                       "temp1","temp_unwarped","temp_warped",
#                       "a","b"))
x<-xstart
#xstart: minimum start point of segment i in query signal
#xend: maximum end point of segment i in query signal
xstart <- max(1+i*(Seg+d-Slack),(Lt+1)-(N-i)*(Seg+d+Slack))
xend <- min(1+i*(Seg+d + Slack),(Lt+1)-(N-i)*(Seg+d-Slack))
cat("\n i=",i,"\\(", xstart, "-" ,xend, "\\) \n")
i <- N-1
if(!is.matrix(T)) T <- as.matrix(T)
if(!is.matrix(X)) X <- as.matrix(X)
# Pre-aligming length of chromatogram
# Intervals of 1 unit in P
Lx <- nrow(X)-1
# Post-aligning length of chromatogram and length of
# target chromatogram
Lt <- nrow(T)-1
# Calculate number of sections for X the query signal
N <- floor((Lx+1)/Seg)
# Ix sequence of node positions in X (query signal) before warping
Ix <- round(seq(1,(Lx+1) ,length.out = (N+1)))
temp = Lx %% Seg
# N number of sections and N + 1 nodes
Nnodes <- length(Ix)
if (Nnodes == N + 1)
{
if(Ix[Nnodes] != (Lx+1) ) Ix[Nnodes] <- Ix[Nnodes-1]+temp
} else if (N-1 - Nnodes == 1)
Ix[Nnodes + 1] <- Lx + 1
# calculate difference in mean section length between P and T
d <- floor(Lt/N) - Seg
F1 <- matrix(0.0, nrow = (N+1), ncol = Lt + 1)
U <- matrix(0.0, nrow = (N+1), ncol = Lt + 1)
for (i in 1:(N+1))
{
for(x in 1:(Lt + 1))
{
F1[i,x] <- -Inf
}
}
F1[N+1,] = 0
# W is the list that contain the warping signal for warping nodes
aux1W <- list()
temp1 <- list()
temp_unwarped <- list()
temp_warped <- list()
a <- rep(0, ncol(T)*nrow(T))
b <- rep(0, ncol(T)*nrow(T))
i <- N-1
x <- 0
for (i in (N-1):0)
{
#xstart: minimum start point of segment i in query signal
#xend: maximum end point of segment i in query signal
xstart <- max(1+i*(Seg+d-Slack),(Lt+1)-(N-i)*(Seg+d+Slack))
xend <- min(1+i*(Seg+d + Slack),(Lt+1)-(N-i)*(Seg+d-Slack))
cat("\n i=",i,"\\(", xstart, "-" ,xend, "\\) \n")
#    cl <- makeCluster(8)
#    clusterExport(cl,c("i","d","N","Slack","Seg","X","Ix","Lt",
#                       "T","F1","U","aux1W","f",
#                       "temp1","temp_unwarped","temp_warped",
#                       "a","b"))
for (x in xstart:xend)
{
for (u in (d-Slack):(d+Slack))
{
if( x+Seg+u <= Lt + 1 )
{
n_cores <- detectCores(logical = TRUE)
cl <- makeCluster(n_cores - 1, type = "PSOCK")
registerDoParallel(cl)
clusterExport(cl,list('Warping','x','i','u','Seg','Slack','Ix','X','T'),
envir = .GlobalEnv)
channel <- 1:ncol(X)
tic("channel")
results <- c(parLapply(cl,channel,fun = Warping))
toc()
for(channel in 1:ncol(X))
{
temp_warped[[channel]] <- results[[channel]]$warped
temp_unwarped[[channel]] <- results[[channel]]$unwarped
}
a <- unlist(temp_unwarped)
b <- unlist(temp_warped)
if ( all( c(var(a),var(b)) !=0 )) corr <- cor(a,b) else  corr <- 0
#   fsum <- F1[i+2,x+Seg+u] + f(x,Seg,u,Slack,Ix[i+1],Ix[i+2],X,T)
fsum <- F1[i+2,x+Seg+u] + corr
cat("\nnode=",i,",x =",x,",u=",u,",fsum=",fsum,"\n")
if (fsum > F1[i+1,x])
{
F1[i+1,x] <- fsum
U[i+1,x] <- u
aux1W[[i+1]] <- b
}# End-if
}# End-if
}# End for u
} # End for x
} # End for i
if(!is.matrix(T)) T <- as.matrix(T)
if(!is.matrix(X)) X <- as.matrix(X)
# Pre-aligming length of chromatogram
# Intervals of 1 unit in P
Lx <- nrow(X)-1
# Post-aligning length of chromatogram and length of
# target chromatogram
Lt <- nrow(T)-1
# Calculate number of sections for X the query signal
N <- floor((Lx+1)/Seg)
X1
T1
X <- X1
T <- T1
# Ix sequence of node positions in X (query signal) before warping
Ix <- round(seq(1,(Lx+1) ,length.out = (N+1)))
if(!is.matrix(T)) T <- as.matrix(T)
if(!is.matrix(X)) X <- as.matrix(X)
# Pre-aligming length of chromatogram
# Intervals of 1 unit in P
Lx <- nrow(X)-1
# Post-aligning length of chromatogram and length of
# target chromatogram
Lt <- nrow(T)-1
# Calculate number of sections for X the query signal
N <- floor((Lx+1)/Seg)
# Ix sequence of node positions in X (query signal) before warping
Ix <- round(seq(1,(Lx+1) ,length.out = (N+1)))
temp = Lx %% Seg
# N number of sections and N + 1 nodes
Nnodes <- length(Ix)
if (Nnodes == N + 1)
{
if(Ix[Nnodes] != (Lx+1) ) Ix[Nnodes] <- Ix[Nnodes-1]+temp
} else if (N-1 - Nnodes == 1)
Ix[Nnodes + 1] <- Lx + 1
# calculate difference in mean section length between P and T
d <- floor(Lt/N) - Seg
F1 <- matrix(0.0, nrow = (N+1), ncol = Lt + 1)
U <- matrix(0.0, nrow = (N+1), ncol = Lt + 1)
for (i in 1:(N+1))
{
for(x in 1:(Lt + 1))
{
F1[i,x] <- -Inf
}
}
F1[N+1,] = 0
# W is the list that contain the warping signal for warping nodes
aux1W <- list()
temp1 <- list()
temp_unwarped <- list()
temp_warped <- list()
a <- rep(0, ncol(T)*nrow(T))
b <- rep(0, ncol(T)*nrow(T))
i <- N-1
x <- 0
for (i in (N-1):0)
{
#xstart: minimum start point of segment i in query signal
#xend: maximum end point of segment i in query signal
xstart <- max(1+i*(Seg+d-Slack),(Lt+1)-(N-i)*(Seg+d+Slack))
xend <- min(1+i*(Seg+d + Slack),(Lt+1)-(N-i)*(Seg+d-Slack))
cat("\n i=",i,"\\(", xstart, "-" ,xend, "\\) \n")
#    cl <- makeCluster(8)
#    clusterExport(cl,c("i","d","N","Slack","Seg","X","Ix","Lt",
#                       "T","F1","U","aux1W","f",
#                       "temp1","temp_unwarped","temp_warped",
#                       "a","b"))
for (x in xstart:xend)
{
for (u in (d-Slack):(d+Slack))
{
if( x+Seg+u <= Lt + 1 )
{
n_cores <- detectCores(logical = TRUE)
cl <- makeCluster(n_cores - 1, type = "PSOCK")
registerDoParallel(cl)
clusterExport(cl,list('Warping','x','i','u','Seg','Slack','Ix','X','T'),
envir = .GlobalEnv)
channel <- 1:ncol(X)
tic("channel")
results <- c(parLapply(cl,channel,fun = Warping))
toc()
for(channel in 1:ncol(X))
{
temp_warped[[channel]] <- results[[channel]]$warped
temp_unwarped[[channel]] <- results[[channel]]$unwarped
}
a <- unlist(temp_unwarped)
b <- unlist(temp_warped)
if ( all( c(var(a),var(b)) !=0 )) corr <- cor(a,b) else  corr <- 0
#   fsum <- F1[i+2,x+Seg+u] + f(x,Seg,u,Slack,Ix[i+1],Ix[i+2],X,T)
fsum <- F1[i+2,x+Seg+u] + corr
cat("\nnode=",i,",x =",x,",u=",u,",fsum=",fsum,"\n")
if (fsum > F1[i+1,x])
{
F1[i+1,x] <- fsum
U[i+1,x] <- u
aux1W[[i+1]] <- b
}# End-if
}# End-if
}# End for u
} # End for x
} # End for i
WX1_Par <- alignGCMS_Parallel(T1,X1,Seg,Slack)
tic("alighGCMS_Parallel")
WX1_Par <- alignGCMS_Parallel(T1,X1,Seg,Slack)
toc()
str(Data)
Data[1,,]
dim(Data[1,1:2900,])
plot(Data[1,,100],type = "l")
plot(Data[2,,100],type = "l")
Data <- readRDS(paste0(ruta,"/sample_data.rds"))
str(Data)
ruta<-getwd()
Data <- readRDS(paste0(ruta,"/sample_data.rds"))
str(Data)
Data[1,,]
dim(Data[1,1:2900,])
plot(Data[1,,100],type = "l")
plot(Data[2,,100],type = "l")
# set 1st signal GC-MS as a target
T <- Data[1,,1:10]
# set 2nd signal GC-MS as a query
X <- Data[2,,1:10]
Seg <- 15
Slack <- 5
tic("alignGCMS_Parallel")
Xaligned_Par <- alignGCMS_Parallel(T,X,Seg,Slack)
toc()
# set 1st signal GC-MS as a target
T <- Data[1,,]
# set 2nd signal GC-MS as a query
X <- Data[2,,]
tic("alighGCMS")
WX1 <- alignGCMS(T1,X1,Seg,Slack)
toc()
T1 = c(0,1,1,2,5,6,5,5,4,4,3,2,1,1,0,0)
X1 = c(0,0,1,1,1,2,3,5,5,6,6,5,3,1,1,0)
X2  = c(0,0,1,1,1,2,3,5,5,6,6,5,2,1,1,0)
slack = 1
Seg = 5
Slack = 1
Options = c(0,1,1,0,0)
tic("alighGCMS")
WX1 <- alignGCMS(T1,X1,Seg,Slack)
toc()
WX1$W
tic("alighGCMS_Parallel")
WX1_Par <- alignGCMS_Parallel(T1,X1,Seg,Slack)
toc()
alignGCMS_Parallel <- function(T,X,Seg,Slack)
{
# X:  query GC-MS signal
# T: target GC-MS signal
# Seg: Segment length
# Slack: minimum warping
# F1: matrix containing the cumulated benefit function
if(!is.matrix(T)) T <- as.matrix(T)
if(!is.matrix(X)) X <- as.matrix(X)
# Pre-aligming length of chromatogram
# Intervals of 1 unit in P
Lx <- nrow(X)-1
# Post-aligning length of chromatogram and length of
# target chromatogram
Lt <- nrow(T)-1
# Calculate number of sections for X the query signal
N <- floor((Lx+1)/Seg)
# Ix sequence of node positions in X (query signal) before warping
Ix <- round(seq(1,(Lx+1) ,length.out = (N+1)))
# temp = (pX-1) %% LenSeg[1,1]
# remainder of the segments and signals can have different lengths
temp = Lx %% Seg
# N number of sections and N + 1 nodes
Nnodes <- length(Ix)
if (Nnodes == N + 1)
{
if(Ix[Nnodes] != (Lx+1) ) Ix[Nnodes] <- Ix[Nnodes-1]+temp
} else if (N-1 - Nnodes == 1)
Ix[Nnodes + 1] <- Lx + 1
# calculate difference in mean section length between P and T
d <- floor(Lt/N) - Seg
F1 <- matrix(0.0, nrow = (N+1), ncol = Lt + 1)
U <- matrix(0.0, nrow = (N+1), ncol = Lt + 1)
for (i in 1:(N+1))
{
for(x in 1:(Lt + 1))
{
F1[i,x] <- -Inf
}
}
F1[N+1,] = 0
# W is the list that contain the warping signal for warping nodes
aux1W <- list()
temp1 <- list()
temp_unwarped <- list()
temp_warped <- list()
a <- rep(0, ncol(T)*nrow(T))
b <- rep(0, ncol(T)*nrow(T))
i <- N-1
x <- 0
for (i in (N-1):0)
{
#xstart: minimum start point of segment i in query signal
#xend: maximum end point of segment i in query signal
xstart <- max(1+i*(Seg+d-Slack),(Lt+1)-(N-i)*(Seg+d+Slack))
xend <- min(1+i*(Seg+d + Slack),(Lt+1)-(N-i)*(Seg+d-Slack))
cat("\n i=",i,"\\(", xstart, "-" ,xend, "\\) \n")
#    cl <- makeCluster(8)
#    clusterExport(cl,c("i","d","N","Slack","Seg","X","Ix","Lt",
#                       "T","F1","U","aux1W","f",
#                       "temp1","temp_unwarped","temp_warped",
#                       "a","b"))
for (x in xstart:xend)
{
for (u in (d-Slack):(d+Slack))
{
if( x+Seg+u <= Lt + 1 )
{
n_cores <- detectCores(logical = TRUE)
cl <- makeCluster(n_cores - 1, type = "PSOCK")
registerDoParallel(cl)
clusterExport(cl,list('Warping','x','i','u','Seg','Slack','Ix','X','T'),
envir = .GlobalEnv)
channel <- 1:ncol(X)
#          tic("channel")
results <- c(parLapply(cl,channel,fun = Warping))
#          toc()
for(channel in 1:ncol(X))
{
temp_warped[[channel]] <- results[[channel]]$warped
temp_unwarped[[channel]] <- results[[channel]]$unwarped
}
a <- unlist(temp_unwarped)
b <- unlist(temp_warped)
if ( all( c(var(a),var(b)) !=0 )) corr <- cor(a,b) else  corr <- 0
#   fsum <- F1[i+2,x+Seg+u] + f(x,Seg,u,Slack,Ix[i+1],Ix[i+2],X,T)
fsum <- F1[i+2,x+Seg+u] + corr
cat("\nnode=",i,",x =",x,",u=",u,",fsum=",fsum,"\n")
if (fsum > F1[i+1,x])
{
F1[i+1,x] <- fsum
U[i+1,x] <- u
aux1W[[i+1]] <- b
}# End-if
}# End-if
}# End for u
} # End for x
} # End for i
#  F1 <- r$F1
#  U <- r$U
F1
U
Xw <- rep(0,N+1)
u <- rep(0,N+1)
aux2W <- list()
Xw[1]<-1
Xw[N+1]<-length(X)
for(i in 1:(N-1) )
{
u[i] <- U[i,Xw[i]]
Xw[i+1] <- Xw[i]+Seg+u[i]
}
for(i_node in 1:length(aux1W))
{
nelements <- length(aux1W[[i_node]])
if(i_node<length(aux1W))
{
aux2W[[i_node]] <- aux1W[[i_node]][1:(nelements-1)]
} else
{
aux2W[[i_node]] <- aux1W[[i_node]][1:(nelements)]
}
}
W <- unlist(aux2W)
return(list(X=Ix,Ixw = Xw, u=u,F1=F1,U=U,W = W))
}
tic("alighGCMS")
WX1 <- alignGCMS(T1,X1,Seg,Slack)
toc()
WX1$W
tic("alighGCMS_Parallel")
WX1_Par <- alignGCMS_Parallel(T1,X1,Seg,Slack)
toc()
tic("alighGCMS")
WX1 <- alignGCMS(T1,X1,Seg,Slack)
toc()
source("GC_Sim.R")
ruta<-getwd()
Data <- readRDS(paste0(ruta,"/sample_data.rds"))
str(Data)
Data[1,,]
dim(Data[1,1:2900,])
plot(Data[1,,100],type = "l")
plot(Data[2,,100],type = "l")
# set 1st signal GC-MS as a target
T <- Data[1,,]
# set 2nd signal GC-MS as a query
X <- Data[2,,]
Seg <- 15
Slack <- 5
# set 1st signal GC-MS as a target
T <- Data[1,,1:2]
# set 2nd signal GC-MS as a query
X <- Data[2,,1:2]
Seg <- 15
Slack <- 5
tic("alignGCMS")
Xaligned <- alignGCMS(T,X,Seg,Slack)
toc()
